{
    "printf": {
        "scope": "cpp",
        "prefix": "printf",
        "body": "printf(\"$1\\n\"$2);$0",
        "description": "printf a new line"
    },
    "scanf int": {
        "scope": "cpp",
        "prefix": "scanfint",
        "body": "scanf(\"$1%d\", &${2:i});$0",
        "description": "scanf get int as input"
    },
    "std::cout": {
        "scope": "cpp",
        "prefix": "cout",
        "body": "std::cout << $1 << std::endl;$0",
        "description": "std::cout <<  << std::endl;"
    },
    "while": {
        "scope": "cpp",
        "prefix": "while",
        "body": [
            "while ($1)",
            "{",
            "\t$0",
            "}"
        ],
        "description": "while(){}"
    },
    "pragma once": {
        "scope": "cpp",
        "prefix": "pragmaonce",
        "body": [
            "#pragma once",
            "$0"
        ],
        "description": "#pragma once"
    },
    "#include <>": {
        "scope": "cpp",
        "prefix": "include<>",
        "body": [
            "#include <$0>",
        ],
        "description": "#include <>"
    },
    "#include \"\"": {
        "scope": "cpp",
        "prefix": "include\"\"",
        "body": [
            "#include \"$0\"",
        ],
        "description": "#include \"\""
    },
    "#include <iostream>": {
        "scope": "cpp",
        "prefix": "includeiostream",
        "body": [
            "#include <iostream>",
            "$0"
        ],
        "description": "#include <iostream>"
    },
    "#include <vector>": {
        "scope": "cpp",
        "prefix": "includevector",
        "body": [
            "#include <vector>",
            "$0"
        ],
        "description": "#include <vector>"
    },
    "#include <string>": {
        "scope": "cpp",
        "prefix": "includestring",
        "body": [
            "#include <string>",
            "$0"
        ],
        "description": "#include <string>"
    },
    "#include <map>": {
        "scope": "cpp",
        "prefix": "includemap",
        "body": [
            "#include <map>",
            "$0"
        ],
        "description": "#include <map>"
    },
    "#include <algorithm>": {
        "scope": "cpp",
        "prefix": "includealgorithm",
        "body": [
            "#include <algorithm>",
            "$0"
        ],
        "description": "#include <algorithm>"
    },
    "#include <memory>": {
        "scope": "cpp",
        "prefix": "includememory",
        "body": [
            "#include <memory>",
            "$0"
        ],
        "description": "#include <memory>"
    },
    "std::vector": {
        "scope": "cpp",
        "prefix": "vector",
        "body": "std::vector<${1:type}> ${2:vecVar}$0",
        "description": "std::vector<type> var"
    },
    "std::list": {
        "scope": "cpp",
        "prefix": "list",
        "body": "std::list<${1:type}> ${2:listVar}$0",
        "description": "std::list<type> var"
    },
    "std::deque": {
        "scope": "cpp",
        "prefix": "deque",
        "body": "std::deque<${1:type}> ${2:dequeVar}$0",
        "description": "std::deque<type> var"
    },
    "std::stack": {
        "scope": "cpp",
        "prefix": "stack",
        "body": "std::stack<${1:type}> ${2:stackVar}$0",
        "description": "std::stack<type> var"
    },
    "std::queue": {
        "scope": "cpp",
        "prefix": "queue",
        "body": "std::queue<${1:type}> ${2:queueVar}$0",
        "description": "std::queue<type> var"
    },
    "std::priority_queue": {
        "scope": "cpp",
        "prefix": "priority_queue",
        "body": "std::priority_queue<${1:type}> ${2:priority_queueVar}$0",
        "description": "std::priority_queue<type> var"
    },
    "std::set": {
        "scope": "cpp",
        "prefix": "set",
        "body": "std::set<${1:type}> ${2:setVar}$0",
        "description": "std::set<type> var"
    },
    "std::pair": {
        "scope": "cpp",
        "prefix": "pair",
        "body": "std::pair<${1:type1}, ${2:type2}> ${3:pairVar}$0",
        "description": "std::pair<type1, type2> var"
    },
    "std::map": {
        "scope": "cpp",
        "prefix": "map",
        "body": "std::map<${1:type1}, ${2:type2}> ${3:mapVar}$0",
        "description": "std::map<type1, type2> var"
    },
    "std::unordered_map": {
        "scope": "cpp",
        "prefix": "unordered_map",
        "body": "std::unordered_map<${1:type1}, ${2:type2}> ${3:unmapVar}$0",
        "description": "std::unordered_map<type1, type2> var"
    },
    "iterator_list": {
        "scope": "cpp",
        "prefix": "for_list",
        "body": [
            "for(std::list<${1:type}>::iterator ${2:it} = ${3:collection}.begin(); ${2:it} != ${3:collection}.end(); ++${2:it})",
            "{",
            "\t$0",
            "}",
        ],
        "description": "for i in list/vector"
    },
    "iterator": {
        "scope": "cpp",
        "prefix": "for_it",
        "body": [
            "for(auto ${1:it} = ${2:collection}.begin(); ${1:it} != ${2:collection}.end(); ++${1:it})",
            "{",
            "\t$0",
            "}",
        ],
        "description": "for it in collection"
    },
    "std::shared_ptr": {
        "scope": "cpp",
        "prefix": "shared_ptr",
        "body": "std::shared_ptr<${1:type}> ${2:sharedptrVar}$0",
        "description": "std::shared_ptr<type> var"
    },
    "using namespace std;": {
        "scope": "cpp",
        "prefix": "usingnamespacestd;",
        "body": [
            "using namespace std;",
            "$0"
        ],
        "description": "using namespace std;"
    },
    "for": {
        "scope": "cpp",
        "prefix": "for",
        "body": [
            "for (${1:type} ${2:index} = ${3:0}; ${2:index} < ${4:interrupt}; ++${2:index})",
            "{",
            "\t$0",
            "}",
        ],
        "description": "for"
    },
    "if0": {
        "scope": "cpp",
        "prefix": "#if0",
        "body": [
            "#if 0",
            "#else",
            "#endif",
        ],
        "description": "#if 0"
    },
    "sort_2d_vector": {
        "scope": "cpp",
        "prefix": "sort_2d",
        "body": [
            "sort(${1:collection}.begin(), ${1:collection}.end(), [](${2:vector<int>} lhs, ${2:vector<int>} rhs)",
            "{ return (lhs[0] < rhs[0]) ? true",
            ": ((rhs[0] < lhs[0]) ? false",
            ": (lhs[1] < rhs[1] ? true",
            ": (rhs[1] < lhs[1] ? false : false))); });"
        ],
        "description": "sort(begin,end,[](lhs, rhs){});"
    }
}

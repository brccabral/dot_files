{
    "Textbox": {
        "scope": "python",
        "prefix": "tk_textbox",
        "body": [
            "self.${1:textbox} = tk.Text(self.${2:root}, width=${3:40}, height=${4:10})",
            "self.${1:textbox}.${5|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Text()"
    },
    "Button": {
        "scope": "python",
        "prefix": "tk_button",
        "body": [
            "self.${1:button} = tk.Button(self.${2:root}, text='${3:Sample}', command=self.${4:function_name})",
            "self.${1:button}.${5|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Button()"
    },
    "Label": {
        "scope": "python",
        "prefix": "tk_label",
        "body": [
            "self.${1:label} = tk.Label(self.${2:root}, text='${3:Sample}')",
            "self.${1:label}.${4|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Label()"
    },
    "LabelFrame": {
        "scope": "python",
        "prefix": "tk_labelframe",
        "body": [
            "self.${1:label_frame} = tk.LabelFrame(self.${2:root}, text='${3:Sample}')",
            "self.${1:label_frame}.${4|grid,pack|}()",
            "$0"
        ],
        "description": "tk.LabelFrame()"
    },
    "Message": {
        "scope": "python",
        "prefix": "tk_message",
        "body": [
            "self.${1:message} = tk.Message(self.${2:root}, text='${3:Sample}', aspect=${4:150}, justify=${5|LEFT,RIGHT,CENTER|})",
            "self.${1:message}.${5|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Message()"
    },
    "Entry": {
        "scope": "python",
        "prefix": "tk_entry",
        "body": [
            "self.${1:entry} = tk.Entry(self.${2:root})",
            "self.${1:entry}.${3|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Entry()"
    },
    "Entry Font": {
        "scope": "python",
        "prefix": "tk_entry_font",
        "body": [
            "self.${1:entry} = tk.Entry(self.${2:root}, font=('${3:Arial}', ${4:28}))",
            "self.${1:entry}.${5|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Entry()"
    },
    "Frame": {
        "scope": "python",
        "prefix": "tk_frame",
        "body": [
            "self.${1:frame} = tk.Frame(self.${2:root})",
            "self.${1:frame}.${3|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Frame()"
    },
    "Listbox": {
        "scope": "python",
        "prefix": "tk_listbox",
        "body": [
            "self.${1:listbox} = tk.Listbox(self.${2:root}, selectmode=${3|BROWSE,SINGLE,MULTIPLE,EXTENDED|})",
            "self.${1:listbox}.${4|grid,pack|}()",
            "self.${1:listbox}.insert(END, *${5:list_var})",
            "$0"
        ],
        "description": "tk.Listbox()"
    },
    "Font": {
        "scope": "python",
        "prefix": "tk_font",
        "body": [
            "self.${1:font} = Font(self.${2:root}, size=${3:10})",
            "$0"
        ],
        "description": "tk.Font()"
    },
    "Filedialog Ask Open": {
        "scope": "python",
        "prefix": "tk_fileaskopen",
        "body": [
            "${1:filename} = filedialog.askopenfilename(initialdir='${2:.}', filetypes=(('${3:Filetype description}', '*.${4:ext}'),))",
            "if not ${1:filename}:",
            "\treturn",
            "$0"
        ],
        "description": "filedialog.askopenfilename()"
    },
    "Filedialog Ask Save": {
        "scope": "python",
        "prefix": "tk_fileasksave",
        "body": [
            "${1:filename} = filedialog.asksaveasfilename(initialdir='${2:.}', filetypes=(('${3:Filetype description}', '*.${4:ext}'),))",
            "if not ${1:filename}:",
            "\treturn",
            "$0"
        ],
        "description": "filedialog.asksaveasfilename()"
    },
    "ScrollFrame": {
        "scope": "python",
        "prefix": "tk_scrollframe",
        "body": [
            "self.${1:outer_frame} = tk.Frame(self.${2:root})",
            "self.${1:outer_frame}.pack(fill=BOTH, expand=1)\n",
            "self.${3:canvas} = tk.Canvas(self.${1:outer_frame})",
            "self.${3:canvas}.pack(side=LEFT, fill=BOTH, expand=1)\n",
            "self.${3:canvas}.configure(scrollregion=self.${3:canvas}.bbox('all'))",
            "self.${3:canvas}.bind('<Configure>', lambda event: self.${3:canvas}.configure(scrollregion=self.${3:canvas}.bbox('all')))\n",
            "self.${4:work_frame} = tk.Frame(self.${3:canvas})\n",
            "if os.name == 'nt':",
            "\tself.${4:work_frame}.bind('<MouseWheel>', lambda event: self.${3:canvas}.yview('scroll', -1 if event.num==4 else 1, 'units'))",
            "else:",
            "\tself.${4:work_frame}.bind('<Button-4>', lambda event: self.${3:canvas}.yview('scroll', -1 if event.num==4 else 1, 'units'))",
            "\tself.${4:work_frame}.bind('<Button-5>', lambda event: self.${3:canvas}.yview('scroll', -1 if event.num==4 else 1, 'units'))\n",
            "self.${3:canvas}.create_window((0,0), window=self.${4:work_frame}, anchor=NW)\n",
            "self.${5:vertical_scroll} = tk.Scrollbar(self.${3:canvas}, orient=VERTICAL, command=self.${3:canvas}.yview)",
            "self.${5:vertical_scroll}.pack(side=RIGHT, fill=Y)",
            "self.${3:canvas}.config(yscrollcommand=self.${5:vertical_scroll}.set)\n",
            "self.${6:horizontal_scroll} = tk.Scrollbar(self.${3:canvas}, orient=HORIZONTAL, command=self.${3:canvas}.xview)",
            "self.${6:horizontal_scroll}.pack(side=BOTTOM, fill=X)",
            "self.${3:canvas}.config(xscrollcommand=self.${6:horizontal_scroll}.set)\n",
            "$0"
        ],
        "description": "filedialog.asksaveasfilename()"
    },
    "ScrollCanvas": {
        "scope": "python",
        "prefix": "tk_scrollcanvas",
        "body": [
            "self.${1:canvas} = tk.Canvas(self.${2:root})",
            "self.${1:canvas}.configure(scrollregion=(0, 0, self.width, self.height))",
            "self.${1:canvas}.bind('<Configure>', lambda event: self.${1:canvas}.configure(scrollregion=self.${1:canvas}.bbox('all')))\n",
            "self.${3:vertical_scroll} = tk.Scrollbar(self.${2:root}, orient=VERTICAL, command=self.${1:canvas}.yview)",
            "self.${3:vertical_scroll}.pack(side=RIGHT, fill=Y)",
            "self.${1:canvas}.config(yscrollcommand=self.${3:vertical_scroll}.set)\n",
            "self.${4:horizontal_scroll} = tk.Scrollbar(self.${2:root}, orient=HORIZONTAL, command=self.${1:canvas}.xview)",
            "self.${4:horizontal_scroll}.pack(side=BOTTOM, fill=X)",
            "self.${1:canvas}.config(xscrollcommand=self.${4:horizontal_scroll}.set)\n",
            "# pack the canvas after the horizontal scroll to position correctly\n",
            "self.${1:canvas}.pack(side=LEFT, fill=BOTH, expand=1)\n",
            "if os.name == 'nt':",
            "\tself.${1:canvas}.bind('<MouseWheel>', lambda event: self.${1:canvas}.yview('scroll', -1 if event.num==4 else 1, 'units'))",
            "else:",
            "\tself.${1:canvas}.bind('<Button-4>', lambda event: self.${1:canvas}.yview('scroll', -1 if event.num==4 else 1, 'units'))",
            "\tself.${1:canvas}.bind('<Button-5>', lambda event: self.${1:canvas}.yview('scroll', -1 if event.num==4 else 1, 'units'))\n",
            "$0"
        ],
        "description": "filedialog.asksaveasfilename()"
    },
    "Menu New": {
        "scope": "python",
        "prefix": "tk_menunew",
        "body": [
            "self.menu = tk.Menu(self.root)",
            "self.root.config(menu=self.menu)",
            "self.${1:item_menu} = tk.Menu(self.menu, tearoff=False)",
            "self.menu.add_cascade(label='${2:Title}', menu=self.${1:item_menu})",
            "self.${1:item_menu}.add_command(label='${3:Command}', command=self.${4:function_name})",
            "self.${1:item_menu}.add_separator()",
            "self.${1:item_menu}.add_command(label='Exit', command=self.root.quit)",
            "$0"
        ],
        "description": "tk.Menu() new"
    },
    "Menu Item": {
        "scope": "python",
        "prefix": "tk_menuitem",
        "body": [
            "self.${1:item_menu} = tk.Menu(self.menu, tearoff=False)",
            "self.menu.add_cascade(label='${2:Title}', menu=self.${1:item_menu})",
            "self.${1:item_menu}.add_command(label='${3:Command}', command=self.${4:function_name})",
            "$0"
        ],
        "description": "tk.Menu() item"
    },
    "Radiobutton New": {
        "scope": "python",
        "prefix": "tk_radiobuttonnew",
        "body": [
            "self.${1:radio_var} = tk.${2|IntVar,StringVar|}()",
            "self.${1:radio_var}.set(${3:0})",
            "self.${4:radio_button} = tk.Radiobutton(self.${5:root}, text='${6:Option 1}', variable=self.${1:radio_var}, value=${7:1}, command=self.${8:function_name})",
            "self.${4:radio_button}.${9|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Radiobutton() new"
    },
    "Radiobutton Option": {
        "scope": "python",
        "prefix": "tk_radiobuttonoption",
        "body": [
            "self.${1:radio_button} = tk.Radiobutton(self.${2:root}, text='${3:Option 1}', variable=self.${4:radio_var}, value=${5:1}, command=self.${6:function_name})",
            "self.${1:radio_button}.${7|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Radiobutton() new"
    },
    "Checkbutton New": {
        "scope": "python",
        "prefix": "tk_checkbuttonnew",
        "body": [
            "self.${1:check_var} = tk.${2|IntVar,StringVar|}()",
            "self.${1:check_var}.set(${3:0})",
            "self.${4:check_button} = tk.Radiobutton(self.${5:root}, text='${6:Option 1}', variable=self.${1:check_var}, onvalue=${7:1}, offvalue=${8:0})",
            "self.${4:check_button}.deselect()",
            "self.${4:check_button}.${9|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Checkbutton() new"
    },
    "Scale": {
        "scope": "python",
        "prefix": "tk_scale",
        "body": [
            "self.${1:scale} = tk.Scale(self.${2:root}, from_=${3:0}, to=${4:100}, orient=${5|HORIZONTAL,VERTICAL|}, command=self.${6:function_name})",
            "self.${1:scale}.${7|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Label()"
    },
    "Scale TTK": {
        "scope": "python",
        "prefix": "ttk_scale",
        "body": [
            "self.${1:scale} = ttk.Scale(self.${2:root}, from_=${3:0}, to=${4:100}, orient=${5|HORIZONTAL,VERTICAL|}, command=self.${6:function_name}, value=${7:10}, lenght=${8:220})",
            "self.${1:scale}.${9|grid,pack|}()",
            "$0"
        ],
        "description": "tk.Label()"
    },
    "Progressbar": {
        "scope": "python",
        "prefix": "tk_progressbar",
        "body": [
            "self.${1:progressbar} = ttk.Progressbar(self.${2:root}, value=${3:0}, length=${4:100}, orient=${5|HORIZONTAL,VERTICAL|}, mode='${6|determinate,indeterminate|}')",
            "self.${1:progressbar}.${7|grid,pack|}()",
            "$0"
        ],
        "description": "ttk.Progressbar()"
    },
    "Spinbox Integer": {
        "scope": "python",
        "prefix": "tk_spinboxint",
        "body": [
            "self.${1:spinbox_int_var} = tk.IntVar(self.${2:root})",
            "self.${1:spinbox_int_var}.set(${3:0})",
            "self.${4:spinbox_int} = ttk.Spinbox(self.${2:root}, from_=${4:0}, to=${5:100}, increment=${6:1}, textvariable=self.${1:spinbox_int_var}, command=self.${7:function_name})",
            "self.${4:spinbox_int}.${7|grid,pack|}()",
            "$0"
        ],
        "description": "ttk.Spinbox() Integer"
    },
    "Spinbox String": {
        "scope": "python",
        "prefix": "tk_spinboxstr",
        "body": [
            "${1:iterable_var} = [$2]",
            "self.${3:spinbox_int_var} = tk.StringVar(self.${4:root})",
            "self.${3:spinbox_int_var}.set(${5:0})",
            "self.${6:spinbox_int} = ttk.Spinbox(self.${4:root}, values=${1:iterable_var}, textvariable=self.${3:spinbox_int_var}, command=self.${7:function_name})",
            "self.${6:spinbox_int}.${8|grid,pack|}()",
            "$0"
        ],
        "description": "ttk.Spinbox() String"
    },
    "Scrollbar": {
        "scope": "python",
        "prefix": "tk_scrollbar",
        "body": [
            "self.${1:scrollbar} = tk.Scrollbar(self.${2:root}, orient=${3|VERTICAL,HORIZONTAL|})",
            "self.${1:scrollbar}.pack(side=${4|RIGHT,BOTTOM,LEFT,TOP|}, fill=${5|Y,X|})",
            "$0"
        ],
        "description": "tk.Scrollbar()"
    }
}
{
	"from ... import ...": {
		"scope": "python",
		"prefix": "fromim",
		"body": "from ${1:package/module} import ${2:names}$0",
		"description": "from ... import ..."
	},
	"class ClassName": {
		"scope": "python",
		"prefix": "classinit",
		"body": [
			"class ${1:ClassName}:",
			"\tdef __init__(self$2):",
			"\t\t$0"
		],
		"description": "Simple class."
	},
	"class ClassName(object)": {
		"scope": "python",
		"prefix": "classobj",
		"body": [
			"class ${1:ClassName}(${2:object}):",
			"\tdef __init__(self$3):",
			"\t\tsuper().__init__($4)",
			"\t\t$0"
		],
		"description": "class inherits."
	},
	"super init": {
		"scope": "python",
		"prefix": "superinit",
		"body": [
			"super().__init__($1)",
			"$0"
		],
		"description": "super().__init__($1)"
	},
	"def func(arg)": {
		"scope": "python",
		"prefix": "def",
		"body": [
			"def ${1:func}(${2:arg}):",
			"\t$0"
		],
		"description": "Code snippet for function definition."
	},
	"def func(self)": {
		"scope": "python",
		"prefix": "defs",
		"body": [
			"def ${1:func}(self$2):",
			"\t$0"
		],
		"description": "Code snippet for a class method definition."
	},
	"def func(self, args)": {
		"scope": "python",
		"prefix": "defsa",
		"body": [
			"def ${1:func}(self, ${2:args}):",
			"\t$0"
		],
		"description": "Code snippet for a class method definition."
	},
	"def __init__(self)": {
		"scope": "python",
		"prefix": "definit",
		"body": [
			"def __init__(self$1):",
			"\t$0"
		],
		"description": "def __init__"
	},
	"if": {
		"scope": "python",
		"prefix": "if",
		"body": "if ${1:condition}:\n\t$0",
		"description": "if"
	},
	"else": {
		"scope": "python",
		"prefix": "else",
		"body": "else:\n\t$0",
		"description": "if"
	},
	"if:else": {
		"scope": "python",
		"prefix": "ifelse",
		"body": "if ${1:condition}:\n\t${2:}\nelse:\n\t$0",
		"description": "if else"
	},
	"if:elfi": {
		"scope": "python",
		"prefix": "ifelif",
		"body": "if ${1:condition}:\n\t${2:}\nelif ${3:condition}:\n\t$0",
		"description": "if elif"
	},
	"for value in iter": {
		"scope": "python",
		"prefix": "for",
		"body": "for ${1:value} in ${2:iterable}:\n\t$0\n",
		"description": "for value in iter"
	},
	"for value in range": {
		"scope": "python",
		"prefix": "forrange",
		"body": "for ${1:value} in range(${2:int}):\n\t$0\n",
		"description": "for value in range."
	},
	"for:else": {
		"scope": "python",
		"prefix": "fore",
		"body": "for ${1:value} in ${2:iterable}:\n\t${3:}\nelse:\n\t$0\n",
		"description": "for in something else"
	},
	"for:key:value": {
		"scope": "python",
		"prefix": "forkv",
		"body": "for ${1:key}, ${2:value} in ${3:iterable}:\n\t$0\n",
		"description": "for in something else"
	},
	"while": {
		"scope": "python",
		"prefix": "while",
		"body": "while ${1:condition}:\n\t$0",
		"description": "while condition"
	},
	"try:except:": {
		"scope": "python",
		"prefix": "try",
		"body": "try:\n\t${1:}\nexcept ${2:Exception} as ${3:e}:\n\t$0",
		"description": "try except"
	},
	"try:except:else": {
		"scope": "python",
		"prefix": "trye",
		"body": "try:\n\t${1:}\nexcept ${2:Exception} as ${3:e}:\n\t${4:}\nelse:\n\t$0",
		"description": "try except else"
	},
	"try:except:else:finally": {
		"scope": "python",
		"prefix": "tryef",
		"body": "try:\n\t${1:}\nexcept${2:Exception} as ${3:e}:\n\t${4:}\nelse:\n\t${5:}\nfinally:\n\t$0",
		"description": "try except else finally"
	},
	"try:except:finally": {
		"scope": "python",
		"prefix": "tryf",
		"body": "try:\n\t${1:}\nexcept ${2:Exception} as ${3:e}:\n\t${4:}\nfinally:\n\t$0",
		"description": "try except finally."
	},
	"if __name__ == \"__main__\"": {
		"scope": "python",
		"prefix": "ifmain",
		"body": "if __name__ == \"__main__\":\n\tmain()$0",
		"description": "if __name__ == __main__"
	},
	"print(f'{variable=}')": {
		"scope": "python",
		"prefix": "printvar",
		"body": "print(f'{${1:variable}=}$0')",
		"description": "print(f'{variable=}')"
	},
	"print(f'')": {
		"scope": "python",
		"prefix": "printf",
		"body": "print(f'$0')",
		"description": "print(f'')"
	},
	"with open(filename, mode) as f": {
		"scope": "python",
		"prefix": "withopenfile",
		"body": "with open(${1:filename}, ${2:mode}) as ${3:f}:\n\t${4:}$0",
		"description": "with open(filename, mode) as f"
	},
	"loginfoclass": {
		"scope": "python",
		"prefix": "loginfoclass",
		"body": "self.log.info(f'$0')",
		"description": "log info"
	},
	"logdebugclass": {
		"scope": "python",
		"prefix": "logdebugclass",
		"body": "self.log.debug(f'$0')",
		"description": "log debug"
	},
	"logwarnclass": {
		"scope": "python",
		"prefix": "logwarnclass",
		"body": "self.log.warning(f'$0')",
		"description": "log warn"
	},
	"logerrorclass": {
		"scope": "python",
		"prefix": "logerrorclass",
		"body": "self.log.error(f'$0')",
		"description": "log error"
	},
	"loginfo": {
		"scope": "python",
		"prefix": "loginfo",
		"body": "logging.info(f'$0')",
		"description": "log info"
	},
	"logerror": {
		"scope": "python",
		"prefix": "logerror",
		"body": "logging.error(f'$0')",
		"description": "log error"
	},
	"logdebug": {
		"scope": "python",
		"prefix": "logdebug",
		"body": "logging.debug(f'$0')",
		"description": "log debug"
	},
	"logwarn": {
		"scope": "python",
		"prefix": "logwarn",
		"body": "logging.warning(f'$0')",
		"description": "log warn"
	},
	"logbasicconfig": {
		"scope": "python",
		"prefix": "logbasicconfig",
		"body": "logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s.%(funcName)s:%(lineno)d - %(message)s', datefmt='%H:%M:%S', level=logging.DEBUG)",
		"description": "log basic config"
	},
	"logadvancedconfig": {
		"scope": "python",
		"prefix": "logadvancedconfig",
		"body": "logging.basicConfig(format='%(asctime)s - %(levelname)s - %(relativeCreated)d - %(threadName)s.%(module)s.%(name)s.%(funcName)s:%(lineno)d - %(message)s', datefmt='%H:%M:%S', level=logging.DEBUG)",
		"description": "log basic config"
	},
	"logbasicconfigrotate": {
		"scope": "python",
		"prefix": "logbasicconfigrotate",
		"body": [
			"logging.basicConfig(",
			"\tformat=\"%(asctime)s - %(levelname)s - %(name)s.%(funcName)s:%(lineno)d - %(message)s\",",
			"\tdatefmt=\"%Y-%m-%dT%H:%M:%S\",",
			"\tlevel=logging.${1|INFO,DEBUG,ERROR,WARNING,CRITICAL|},",
			"\thandlers=[RotatingFileHandler(\"${2:filename}.log\", maxBytes=5000000, backupCount=10)]",
			")\n$0"
		],
		"description": "log basic config"
	},
	"getLogger": {
		"scope": "python",
		"prefix": "getlogger",
		"body": "self.log = logging.getLogger(${1:self.__class__.__name__})",
		"description": "log getlogger"
	}
}

<snippets filetypes="C++" name="C++ snippets" license="" authors="Bruno Cabral" namespace="">
 <script>function fileName() { return document.fileName(); }
function fileUrl() { return document.url(); }
function encoding() { return document.encoding(); }
function selection() { return view.selectedText(); }
function year() { return new Date().getFullYear(); }
function upper(x) { return x.toUpperCase(); }
function lower(x) { return x.toLowerCase(); }
</script>
 <item>
  <match>brc_include_algorithm</match>
  <fillin>#include &lt;algorithm>
</fillin>
 </item>
 <item>
  <match>brc_remove</match>
  <fillin>auto ${new_end} = remove ( ${collection}.begin(), ${collection}.end(), ${to_remove_ref} );${cursor}</fillin>
 </item>
 <item>
  <match>brc_struct</match>
  <fillin>struct ${StructName}
{
    ${cursor}
};</fillin>
 </item>
 <item>
  <match>brc_include_vector</match>
  <fillin>#include &lt;vector>
</fillin>
 </item>
 <item>
  <match>brc_include_string</match>
  <fillin>#include &lt;string>
</fillin>
 </item>
 <item>
  <match>brc_include_map</match>
  <fillin>#include &lt;map>
</fillin>
 </item>
 <item>
  <match>brc_main</match>
  <fillin>int main()
{
    ${cursor}
    return 0;
}
</fillin>
 </item>
 <item>
  <match>brc_using_namespace_std</match>
  <fillin>using namespace std;
</fillin>
 </item>
 <item>
  <match>brc_cout</match>
  <fillin>cout &lt;&lt; ${cursor} &lt;&lt; endl;
</fillin>
 </item>
 <item>
  <match>brc_cout_std</match>
  <fillin>std::cout &lt;&lt; ${cursor} &lt;&lt; std::endl;
</fillin>
 </item>
 <item>
  <match>brc_include_ostream</match>
  <fillin>#include &lt;ostream>
</fillin>
 </item>
 <item>
  <match>brc_output_stream</match>
  <fillin>friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const ${ClassName} &amp;obj)
{
    os &lt;&lt; ${cursor};
    return os;
}
</fillin>
 </item>
 <item>
  <match>brc_include_sstream</match>
  <fillin>#include &lt;sstream>
</fillin>
 </item>
 <item>
  <match>brc_include_memory</match>
  <fillin>#include &lt;memory>
</fillin>
 </item>
 <item>
  <match>brc_include_iostream</match>
  <fillin>#include &lt;iostream>
</fillin>
 </item>
 <item>
  <match>brc_for_auto_reverse</match>
  <fillin>for(auto ${it} = rbegin(${collection}); ${it} != rend(${collection}); ++${it})
{
    ${cursor}
}</fillin>
 </item>
 <item>
  <match>brc_for_auto</match>
  <fillin>for ( auto &amp;&amp;${it} : ${collection} )
{
    ${cursor}
}</fillin>
 </item>
 <item>
  <match>brc_accumulate</match>
  <fillin>${ResultType} ${result} = accumulate ( ${collection}.begin(), ${collection}.end(), 0, [] ( ${ResultType} ${prev}, ${CollectionItemType} ${current} )
{
    return ${prev} + ${current};${cursor}
} );</fillin>
 </item>
 <item>
  <match>brc_pragma_once</match>
  <fillin>#pragma once
</fillin>
 </item>
 <item>
  <match>brc_vector_var</match>
  <fillin>vector&lt;${TypeVar}> ${var};${cursor}</fillin>
 </item>
 <item>
  <match>brc_copy_if</match>
  <fillin>${CollectionType} ${result} ( ${collection}.size() );
auto ${it} = copy_if ( ${collection}.begin(), ${collection}.end(), ${result}.begin(),
                    [&amp;] ( ${CollectionItemType} ${item} )
{
    return ${condition};
} );
${result}.resize ( distance ( ${result}.begin(), ${it} ) );</fillin>
 </item>
 <item>
  <match>brc_transform</match>
  <fillin>${outputCollection}.resize(${inputCollection}.size());
std::transform(${inputCollection}.begin(), ${inputCollection}.end(), ${outputCollection}.begin(),
                [](const ${InputItemType} ${inputItem}){ return ${outputItem};});</fillin>
 </item>
 <item>
  <match>brc_find</match>
  <fillin>auto ${it} = find(${collection}.begin(), ${collection}.end(), ${searchMe});
if(${it} == ${collection}.end())
    cout &lt;&lt; "not found" &lt;&lt; endl;
else
    cout &lt;&lt; "found " &lt;&lt; *${it} &lt;&lt; endl;
</fillin>
 </item>
 <item>
  <match>brc_find_if</match>
  <fillin>auto ${it} = find_if ( begin ( ${collection} ), end ( ${collection} ), [] ( ${CollectionItemType} ${collectionItem} )
{
    return ${condition}${cursor};
} );
</fillin>
 </item>
 <item>
  <match>brc_erase</match>
  <fillin>${collection}.erase (
    std::remove ( ${collection}.begin(), ${collection}.end(), ${to_remove_ref} ), // * new end()
    ${collection}.end() // * old end()
);${cursor}</fillin>
 </item>
 <item>
  <match>brc_try_catch</match>
  <fillin>try
{
    ${do_something}
}
catch ( const exception &amp;e )
{
    ${catch_me="cout &lt;&lt; e.what() &lt;&lt; endl"};
}
</fillin>
 </item>
</snippets>
